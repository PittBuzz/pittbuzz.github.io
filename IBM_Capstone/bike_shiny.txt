# Install and import required libraries
require(shiny)
require(ggplot2)
require(leaflet)
require(tidyverse)
require(httr)
require(scales)
# Import model_prediction R which contains methods to call OpenWeather API
# and make predictions
source("model_prediction.R")


test_weather_data_generation<-function(){
  #Test generate_city_weather_bike_data() function
  city_weather_bike_df<-generate_city_weather_bike_data()
  stopifnot(length(city_weather_bike_df)>0)
  print(head(city_weather_bike_df))
  return(city_weather_bike_df)
}

# Create a RShiny server
shinyServer <- function(input, output){
  # Define a city list
  
  # Define color factor
  color_levels <- colorFactor(c("green", "yellow", "red"), 
                              levels = c("small", "medium", "large"))
  city_weather_bike_df <- test_weather_data_generation()
  
  # Create another data frame called `cities_max_bike` with each row contains city location info and max bike
  # prediction for the city
  cities_max_bike <- city_weather_bike_df %>%
    group_by(CITY_ASCII,LAT,LNG,BIKE_PREDICTION,BIKE_PREDICTION_LEVEL,LABEL,DETAILED_LABEL,FORECASTDATETIME,TEMPERATURE ) %>%
    summarize(count = n(), 
              max = max(BIKE_PREDICTION, na.rm = TRUE))
  # Observe drop-down event
  
  # Then render output plots with an id defined in ui.R
  output$city_bike_map <- renderLeaflet({
    leaflet(cities_max_bike) %>%
      addTiles() %>%
      addCircleMarkers(lng = ~LNG, lat = ~LAT, 
                       radius = ~ifelse(cities_max_bike$BIKE_PREDICTION_LEVEL=='small', 6, 12),
                       color = ~color_levels(cities_max_bike$BIKE_PREDICTION_LEVEL),
                       stroke = FALSE,
                       fillOpacity = 0.8,
                       label = ~CITY_ASCII)
  })
  # If All was selected from dropdown, then render a leaflet map with circle markers
  # and popup weather LABEL for all five cities
  observeEvent(input$city_dropdown, {
    #filter the data
    if(input$city_dropdown != 'All') {
      
      leafletProxy('city_bike_map') %>%
        clearShapes()
      index = which(cities_max_bike$CITY_ASCII == input$city_dropdown)
      leafletProxy('city_bike_map') %>%
        addCircles(lng = cities_max_bike$LNG[index],
                   lat = cities_max_bike$LAT[index],
                   popup = cities_max_bike$DETAILED_LABEL[index])

      
      
      output$temp_line <- renderPlot({
        ggplot(city_weather_bike_df, aes(FORECASTDATETIME, TEMPERATURE, label = TEMPERATURE)) + 
               geom_line() + 
               geom_point() + 
               geom_text()
        
      })
      
      output$bike_line <- renderPlot({
        ggplot(city_weather_bike_df, aes(FORECASTDATETIME, BIKE_PREDICTION, label = TEMPERATURE)) + 
          geom_line() + 
          geom_point() + 
          geom_text()
        
      })
      
      output$bike_date_output <- renderText({
      input$bike_date_output
        
      })
      
      output$humidity_pred_chart <- renderPlot({
        ggplot(city_weather_bike_df, aes(x = HUMIDITY, y =  BIKE_PREDICTION)) + 
          geom_point() + 
          geom_smooth(method = 'lm', formula = y ~ poly(x, 4))
        
      })
      
        }
        else {
          leafletProxy('city_bike_map')
        } 
    })

}


======================================================================================================================================

#UI

# Load required libraries
require(leaflet)


# Create a RShiny UI
shinyUI(
  fluidPage(padding=5,
  titlePanel("Bike-sharing demand prediction app"),
  
  # Create a side-bar layout
  sidebarLayout(
    # Create a main panel to show cities on a leaflet map
    mainPanel(
      leafletOutput('city_bike_map', width = 800, height = 1000)
    ),
    # Create a side bar to show detailed plots for a city
    sidebarPanel(
      # select drop down list to select city
    
      selectInput(inputId = 'city_dropdown', label = 'City',
                  choices = c("All", "Seoul", "Suzhou", "London", "New York", "Paris"))
      ,plotOutput('temp_line', width = 800)
      ,plotOutput('bike_line', click = 'plot_click', width = 800)
      ,verbatimTextOutput("bike_date_output")
      ,plotOutput('humidity_pred_chart', width = 800)
    ))
))


